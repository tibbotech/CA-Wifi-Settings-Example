'***********************************************************************************************************
'			BLUETOOTH-SIDE COMMANDS/REPLIES
'	depending libraries:
'		settings
'***********************************************************************************************************
include "global.tbh"

sub bt_commit()
	'sys.debugprint(bt.newtxlen)
	sys.timercountms=0
	while sys.timercountms<100
	wend
	
end sub

sub send_html_chunk()
	dim htmlSize, sdfSize as integer
	dim placeholderStart, placeholderEnd as integer
	dim readPointer as dword = 0
	dim chunkSize as dword = 0
	dim htmlBeginSize as dword
	dim html_file as string = "sdf.html"
	dim replace_str as string= "####"
	
	romfile.open(html_file)
	htmlSize = romfile.size
	romfile.open(SDF_FILE)
	sdfSize = romfile.size
	
	
	bt.txclear()
	bt.setdata("{\x22type\x22:\x22spa\x22,\x22length\x22:"+lstr(htmlSize + sdfSize - len(replace_str))+"}")
	bt.send()
	bt_commit()
	
	romfile.open(html_file)
	placeholderStart = romfile.find32(0, replace_str, 0)
	placeholderEnd = placeholderStart + 4
	
	readPointer = 0
	while readPointer < placeholderStart
		if bt.txfree>0  then
			chunkSize = 255
			if readPointer + chunkSize > placeholderStart then
				chunkSize = placeholderStart - readPointer
			end if
			dim str1 as string = romfile.getdata(chunkSize)
			bt.setdata(str1)
			bt.send()
			bt_commit()
			readPointer = romfile.pointer32
		end if
	wend
	romfile.open(SDF_FILE)
	while romfile.pointer32 < romfile.size
		if bt.txfree>0  then
			bt.setdata(romfile.getdata(bt.txfree-bt.newtxlen))
			bt.send()
			bt_commit()
		end if
	wend
	romfile.open(html_file)
	romfile.pointer32 = placeholderEnd
	while romfile.pointer32 < romfile.size
		if bt.txfree>0  then
			bt.setdata(romfile.getdata(bt.txfree-bt.newtxlen))
			bt.send()
			bt_commit()
		end if
	wend
	bt.notifysent(0)
end sub

'====================================================================
public sub proc_bt_cmd(byref cmd_str as string)
	'dim temp_str as string(MAX_BT_CMD_LEN)
	dim reply_str as string(MAX_BT_RPL_LEN)
	dim x as byte
	dim setting_name as string(STG_MAX_SETTING_NAME_LEN)
	dim index as byte
	dim s2 as string(64)
	dim stg_data as string(32)
	

	dim explicit_index as no_yes
	dim logout as no_yes

	dim cs,f,pos as byte 'steve
	dim mac_num as word'steve
	dim i as word

	logout=NO
	explicit_index=NO
	if left(cmd_str,1)<>"D" then
		x=instr(1,cmd_str,CMD_ESC_CHAR,1)
		if x>0 then
			'yes, the sequence is included -- extract it
			setting_name=mid(cmd_str,2,x-2)
			stg_data=mid(cmd_str,x+1,len(cmd_str)-x)
			explicit_index=YES
		end if
	end if

	select case left(cmd_str,1)

	case "G": 'get setting --------------------------------------
		setting_name=mid(cmd_str,2,STG_MAX_SETTING_NAME_LEN)
		if setting_name = "OP" then
			send_html_chunk()
			exit sub
		end if
		
		select case stg_sg(setting_name,0,reply_str,EN_STG_GET)
		case EN_STG_STATUS_OK:
			goto reply_ok_have_data
		case EN_STG_STATUS_UNKNOWN:
			goto reply_err
		case EN_STG_STATUS_INVALID_INDEX:
			goto reply_err
		case else:
			goto reply_failed
		end select


	case "S": 'set setting --------------------------------------
		if explicit_index=NO then
			setting_name=mid(cmd_str,2,2)
			stg_data=right(cmd_str,len(cmd_str)-3)
		end if
		select case stg_sg(setting_name,0,stg_data,EN_STG_SET)
		case EN_STG_STATUS_OK:
			goto reply_ok_have_data
		case EN_STG_STATUS_INVALID:
			goto reply_err
		case EN_STG_STATUS_INVALID_INDEX:
			goto reply_err
		case EN_STG_STATUS_UNKNOWN:
			goto reply_err
		case else:
			goto reply_failed
		end select
	case "B": 'buzz the device ---------------------------------- OK
		pat.channel=0
		pat.play(PAT_BLINK_BOTH_IN_TURNS_FAST,YES)
		goto reply_ok		

	case "I": 'initialize settings --------------------------
		if stg_restore_multiple(EN_STG_INIT_MODE_NORMAL)<>EN_STG_STATUS_OK then goto reply_failed
		goto reply_ok		

	case "E": 'reboot -------------------------------------------
		wln.disable()
		io.num=WLN_RST
		io.state=LOW
		sys.reboot()
	
	case else
		goto reply_err
	
	end select

reply_rejected:
	reply_str="R"
	goto send

reply_err:
	reply_str="C"
	goto send

reply_failed:
	reply_str="F"
	goto send

reply_ok:
	reply_str="A"
	goto send

reply_ok_have_data:
	reply_str="A"+reply_str
	goto send

send:
	reply_str=chr(2)+reply_str+chr(13) 'add encapsulation
	
	#if EMULATION=0
		bt.setdata(reply_str)
		bt.send
	#else
		sock.setdata(reply_str)
		sock.send
	#endif
	
reply_null:
end sub

sub ble_cmd_recv_data()
	dim x,y as byte
	dim bt_cmd_str as string(MAX_BT_CMD_LEN)
	

	bt_cmd_str=bt_cmd_str+bt.getdata(255-len(bt_cmd_str))
	
	x=instr(1,bt_cmd_str,chr(STX),1)
	'this will prevent the string to overflow with garbage
	if len(bt_cmd_str)=MAX_BT_CMD_LEN then
		y=instr(1,bt_cmd_str,chr(CR),1)
		if x=0 or y=0 then
			bt_cmd_str=""
			exit sub
		end if
	end if
	
	while x<>0
		'we've got STX
		bt_cmd_str=right(bt_cmd_str,len(bt_cmd_str)+1-x) 'cut out everything to the left of STX
		x=instr(1,bt_cmd_str,chr(CR),1) 'look for command end
		if x=0 then exit sub
		proc_bt_cmd(mid(bt_cmd_str,2,x-2))
		bt_cmd_str=right(bt_cmd_str,len(bt_cmd_str)-x)
		x=instr(1,bt_cmd_str,chr(STX),1)
	wend
end sub